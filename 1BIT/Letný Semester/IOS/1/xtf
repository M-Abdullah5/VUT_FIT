#!/bin/sh

# Mandatory settings
export POSIXLY_CORRECT=yes
export LC_ALL=C

# Funtion to print help
help() {
    echo "Usage: xtf [-h|--help] [FILTER] [COMMAND] [USER] LOG [LOG2 [...]]";
    echo "COMMAND";
    echo "    list";
    echo "    list-currency";
    echo "    status";
    echo "    profit";
    echo "FILTER";
    echo "    -a DATETIME";
    echo "    -b DATETIME";
    echo "    -c CURRENCY";
}


# Setting up variables
command=""; before_date="";after_date="";currency="";loaded="";user="";

# Read environment variable. If not set -> -20s
percentage=${XTF_PROFIT:-20}


# Loop to read all arguments
while [ "$#" -gt 0 ]
do
    case "$1" in 
        -h|--help) # Print help and exit.
            help;
            exit 0;
            ;;
        list|list-currency|status|profit) # Set command. If already set, print error and exit with exit code 1.
            if [ -z "$command" ]; then
                command="$1";
            else
                >&2 echo "Too many arguments! Please consult \`xtf -h|--help\`";
                exit 1;
            fi
            shift;
            ;;
        -a) # Parse after date filter. If set already, print error and exit with code 1. Also do the same when the date is invalid.
            if [ -z "$after_date" ]; then
                if [ "$(date -d "$2" 2>/dev/null)" ]; then
                    after_date="$2";
                else
                    >&2 echo "\`date_end\`(-a) DATETIME format invalid! Please consult \`man DATETIME\`";
                    exit 1;
                fi
            else
                >&2 echo "You tried to set \`date_end\` too many times! (>1) Please consult \`xtf -h|--help\`";
                exit 1;
            fi
            shift;
            shift;
            ;;
        -b) # Parse before date filter. If set already, print error and exit with code 1. Also do the same when the date is invalid.
            if [ -z "$before_date" ]; then
                if [ "$(date -d "$2" 2>/dev/null)" ]; then
                    before_date="$2";
                else
                    >&2 echo "\`start_end\`(-b) DATETIME format invalid! Please consult \`man DATETIME\`";
                    exit 1;
                fi
            else
                >&2 echo "You tried to set \`before_date\`(-b) too many times! (>1) Please consult \`xtf -h|--help\`";
                exit 1;
            fi
            shift;
            shift;
            ;;
        -c) # Parse currency filter. 
            check=$(echo "$2" | awk "/^[a-zA-Z]{3}$/ {print}");
            if [ -z "$check" ]; then
                >&2 echo "Invalid currency format! Please consult \`xtf -h|--help\`"
                exit 1;
            fi
            if [ -z "$currency" ]; then
                currency="($2;)|"
            else
                currency="${currency}(${2};)|"
            fi
			shift;
			shift;
			;;
		*.log) # Legacy log reading. Only works for log files ending with .log.
			if [ -r "$1" ]; then
				if [ -z "$loaded" ]; then
					loaded=$(cat <"$1");
				else
					loaded=$(echo "$loaded" && (cat <"$1"));
				fi
			else
				>&2 echo "File \`$1\` does not exist!";
				exit 1;
			fi
			shift;
			;;
		*.gz) # Load gzipped logs.
			if [ -r "$1" ]; then
				if [ -z "$loaded" ]; then
					loaded=$(gzip -d -c "$1" | cat);
				else
					loaded=$(echo "$loaded" && (gzip -d -c "$1" | cat))
				fi
			else
				>&2 echo "File \`$1\` does not exist!"
				exit 1;
			fi
			shift;
			;;
		*) # Try to interpret the argument as a file and load it. If that fails, try to set it as a user. If user is already set, print an error message and exit with exit code 1.
			if [ -r "$1" ]; then
				if [ -z "$loaded" ]; then
					loaded=$(cat <"$1");
				else
					loaded=$(echo "$loaded" && (cat <"$1"));
				fi
			else
				if [ -z "$user" ]; then
					user="$1";
				else
					>&2 echo "Argument \`$1\` not recognized. Please consult \`xtf -h|--help\`"
					exit 1;
				fi
			fi
			shift;
			;;
	esac
done

# If no command is entered, the default is list.
if [ -z "$command" ]; then
	command="list";
fi

# If no user is entered, exit with the exit code 1.
if [ -z "$user" ]; then
	echo >&2 "Missing required argument \`USER\`! Please consult \`xtf -h|--help\`";
	exit 1;
fi

# Remove all blank lines
loaded=$(echo "$loaded" | awk "/;/ {print}");

# Validate the structure of all lines. The regex also checks all dates, including leap years and days in given months.
valid="";
valid=$(echo "$loaded" | awk "/^[^;]+;((((19|20)(([02468][048])|([13579][26]))-02-29))|((20[0-9][0-9])|(19[0-9][0-9]))-((((0[1-9])|(1[0-2]))-((0[1-9])|(1[0-9])|(2[0-8])))|((((0[13578])|(1[02]))-31)|(((0[1,3-9])|(1[0-2]))-(29|30))))) ([0-1][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9];[a-zA-Z]{3};-?[0-9]+\.[0-9]+$/ {print}");
if [ "$valid" != "$loaded" ]; then
	echo >&2 "Invalid log format!";
	exit 1;
fi

# Filter out dates that are out of range.
if [ -n "$before_date" ]; then  #-b
	loaded=$(echo "$loaded" | awk -v before="$before_date" -F ";" "(\$2<before){print}");
fi
if [ -n "$after_date" ];then  #-a
	loaded=$(echo "$loaded" | awk -v after="$after_date" -F ";" "(\$2>after){print}");
fi

# Fix the regex conttained in the variable currency, as it contains an extra pipe symbol.
if [ -n "$currency" ]; then
	currency=$(echo "$currency" | sed 's/.$//');
fi

# Set up a regex string to help us filter out a specific user and currencies
regex=""
if [ -n "$user" ]; then
	regex="(${user};)";
fi

if [ -n "$regex" ]; then
	if [ -n "$currency" ]; then
		regex="${regex}.*(${currency})"
	fi
else
	regex="(${currency})"
fi

# Let us figure out what to do
case "$command" in
	list) # Just list using the regex we have created.
		echo "$loaded" | awk "/$regex/ {print}";
		;;
	list-currency) # List only currencies, pass them to uniq and sort
		loaded=$(echo "$loaded" | awk "/$regex/ {print}");
		echo "$loaded" | cut -d ';' -f3 | uniq | sort;
		;;
	status) # Print status. Loop through all currencies and print their sum.
		loaded=$(echo "$loaded" | awk "/$regex/ {print}");
		currency=$(echo "$loaded" | cut -d ';' -f3 | uniq | sort);
		if [ -z "$currency" ]; then
			exit 0;
		fi
		echo "$currency" | while read -r line
		do
			echo "$loaded" | awk -F ';' "/$line;/ {x+=\$4}END{printf(\"$line : %.4f\\n\"), x}";
		done
		;;
	profit) # Print profit. loop through all currencies and print their calculated gain.
		loaded=$(echo "$loaded" | awk "/$regex/ {print}");
		currency=$(echo "$loaded" | cut -d ';' -f3 | uniq | sort);
		if [ -z "$currency" ]; then
			exit 0;
		fi
		echo "$currency" | while read -r line
		do
			echo "$loaded" | awk -F ';' "/$line;/ {if (\$4>0){x+=((\$4 / 100)*$percentage)+\$4;}else{x+=\$4;}}END{printf(\"$line : %.4f\\n\"), x}";
		done
		;;
esac

exit 0;
